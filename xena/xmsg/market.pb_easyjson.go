// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package xmsg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg(in *jlexer.Lexer, out *MarketDataRequestReject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgType":
			out.MsgType = string(in.String())
		case "MDStreamId":
			out.MDStreamId = string(in.String())
		case "RejectText":
			out.RejectText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg(out *jwriter.Writer, in MarketDataRequestReject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"MsgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.MDStreamId != "" {
		const prefix string = ",\"MDStreamId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDStreamId))
	}
	if in.RejectText != "" {
		const prefix string = ",\"RejectText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataRequestReject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataRequestReject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg(l, v)
}
func easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg1(in *jlexer.Lexer, out *MarketDataRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgType":
			out.MsgType = string(in.String())
		case "MDStreamId":
			out.MDStreamId = string(in.String())
		case "SubscriptionRequestType":
			out.SubscriptionRequestType = string(in.String())
		case "ThrottleType":
			out.ThrottleType = string(in.String())
		case "ThrottleTimeInterval":
			out.ThrottleTimeInterval = int64(in.Int64())
		case "ThrottleTimeUnit":
			out.ThrottleTimeUnit = string(in.String())
		case "AggregatedBook":
			out.AggregatedBook = int64(in.Int64())
		case "MarketDepth":
			out.MarketDepth = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg1(out *jwriter.Writer, in MarketDataRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"MsgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.MDStreamId != "" {
		const prefix string = ",\"MDStreamId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDStreamId))
	}
	if in.SubscriptionRequestType != "" {
		const prefix string = ",\"SubscriptionRequestType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubscriptionRequestType))
	}
	if in.ThrottleType != "" {
		const prefix string = ",\"ThrottleType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThrottleType))
	}
	if in.ThrottleTimeInterval != 0 {
		const prefix string = ",\"ThrottleTimeInterval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ThrottleTimeInterval))
	}
	if in.ThrottleTimeUnit != "" {
		const prefix string = ",\"ThrottleTimeUnit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThrottleTimeUnit))
	}
	if in.AggregatedBook != 0 {
		const prefix string = ",\"AggregatedBook\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AggregatedBook))
	}
	if in.MarketDepth != 0 {
		const prefix string = ",\"MarketDepth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MarketDepth))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg1(l, v)
}
func easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg2(in *jlexer.Lexer, out *MarketDataRefresh) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgType":
			out.MsgType = string(in.String())
		case "MDStreamId":
			out.MDStreamId = string(in.String())
		case "LastUpdateTime":
			out.LastUpdateTime = int64(in.Int64())
		case "MDBookType":
			out.MDBookType = string(in.String())
		case "Symbol":
			out.Symbol = string(in.String())
		case "LowRangePx":
			out.LowRangePx = string(in.String())
		case "HighRangePx":
			out.HighRangePx = string(in.String())
		case "LowLimitPx":
			out.LowLimitPx = string(in.String())
		case "HighLimitPx":
			out.HighLimitPx = string(in.String())
		case "ClearingPx":
			out.ClearingPx = string(in.String())
		case "BestBid":
			out.BestBid = string(in.String())
		case "BestAsk":
			out.BestAsk = string(in.String())
		case "MDEntry":
			if in.IsNull() {
				in.Skip()
				out.MDEntry = nil
			} else {
				in.Delim('[')
				if out.MDEntry == nil {
					if !in.IsDelim(']') {
						out.MDEntry = make([]*MDEntry, 0, 8)
					} else {
						out.MDEntry = []*MDEntry{}
					}
				} else {
					out.MDEntry = (out.MDEntry)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MDEntry
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MDEntry)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.MDEntry = append(out.MDEntry, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ratios":
			if in.IsNull() {
				in.Skip()
				out.Ratios = nil
			} else {
				in.Delim('[')
				if out.Ratios == nil {
					if !in.IsDelim(']') {
						out.Ratios = make([]*MDEntry, 0, 8)
					} else {
						out.Ratios = []*MDEntry{}
					}
				} else {
					out.Ratios = (out.Ratios)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *MDEntry
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(MDEntry)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Ratios = append(out.Ratios, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg2(out *jwriter.Writer, in MarketDataRefresh) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"MsgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.MDStreamId != "" {
		const prefix string = ",\"MDStreamId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDStreamId))
	}
	if in.LastUpdateTime != 0 {
		const prefix string = ",\"LastUpdateTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.LastUpdateTime))
	}
	if in.MDBookType != "" {
		const prefix string = ",\"MDBookType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDBookType))
	}
	if in.Symbol != "" {
		const prefix string = ",\"Symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.LowRangePx != "" {
		const prefix string = ",\"LowRangePx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LowRangePx))
	}
	if in.HighRangePx != "" {
		const prefix string = ",\"HighRangePx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighRangePx))
	}
	if in.LowLimitPx != "" {
		const prefix string = ",\"LowLimitPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LowLimitPx))
	}
	if in.HighLimitPx != "" {
		const prefix string = ",\"HighLimitPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighLimitPx))
	}
	if in.ClearingPx != "" {
		const prefix string = ",\"ClearingPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClearingPx))
	}
	if in.BestBid != "" {
		const prefix string = ",\"BestBid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BestBid))
	}
	if in.BestAsk != "" {
		const prefix string = ",\"BestAsk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BestAsk))
	}
	if len(in.MDEntry) != 0 {
		const prefix string = ",\"MDEntry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.MDEntry {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Ratios) != 0 {
		const prefix string = ",\"Ratios\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Ratios {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketDataRefresh) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketDataRefresh) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg2(l, v)
}
func easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg3(in *jlexer.Lexer, out *MDEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Symbol":
			out.Symbol = string(in.String())
		case "MDUpdateAction":
			out.MDUpdateAction = string(in.String())
		case "MDEntryType":
			out.MDEntryType = string(in.String())
		case "MDEntryPx":
			out.MDEntryPx = string(in.String())
		case "MDEntrySize":
			out.MDEntrySize = string(in.String())
		case "NumberOfOrders":
			out.NumberOfOrders = uint32(in.Uint32())
		case "TransactTime":
			out.TransactTime = int64(in.Int64())
		case "TradeId":
			out.TradeId = string(in.String())
		case "AggressorSide":
			out.AggressorSide = string(in.String())
		case "FirstPx":
			out.FirstPx = string(in.String())
		case "LastPx":
			out.LastPx = string(in.String())
		case "HighPx":
			out.HighPx = string(in.String())
		case "LowPx":
			out.LowPx = string(in.String())
		case "BuyVolume":
			out.BuyVolume = string(in.String())
		case "SellVolume":
			out.SellVolume = string(in.String())
		case "Bid":
			out.Bid = string(in.String())
		case "Ask":
			out.Ask = string(in.String())
		case "LowRangePx":
			out.LowRangePx = string(in.String())
		case "HighRangePx":
			out.HighRangePx = string(in.String())
		case "LowLimitPx":
			out.LowLimitPx = string(in.String())
		case "HighLimitPx":
			out.HighLimitPx = string(in.String())
		case "ClearingPx":
			out.ClearingPx = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg3(out *jwriter.Writer, in MDEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Symbol != "" {
		const prefix string = ",\"Symbol\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	if in.MDUpdateAction != "" {
		const prefix string = ",\"MDUpdateAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDUpdateAction))
	}
	if in.MDEntryType != "" {
		const prefix string = ",\"MDEntryType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDEntryType))
	}
	if in.MDEntryPx != "" {
		const prefix string = ",\"MDEntryPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDEntryPx))
	}
	if in.MDEntrySize != "" {
		const prefix string = ",\"MDEntrySize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MDEntrySize))
	}
	if in.NumberOfOrders != 0 {
		const prefix string = ",\"NumberOfOrders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NumberOfOrders))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"TransactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.TradeId != "" {
		const prefix string = ",\"TradeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeId))
	}
	if in.AggressorSide != "" {
		const prefix string = ",\"AggressorSide\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AggressorSide))
	}
	if in.FirstPx != "" {
		const prefix string = ",\"FirstPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstPx))
	}
	if in.LastPx != "" {
		const prefix string = ",\"LastPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastPx))
	}
	if in.HighPx != "" {
		const prefix string = ",\"HighPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighPx))
	}
	if in.LowPx != "" {
		const prefix string = ",\"LowPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LowPx))
	}
	if in.BuyVolume != "" {
		const prefix string = ",\"BuyVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuyVolume))
	}
	if in.SellVolume != "" {
		const prefix string = ",\"SellVolume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SellVolume))
	}
	if in.Bid != "" {
		const prefix string = ",\"Bid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Bid))
	}
	if in.Ask != "" {
		const prefix string = ",\"Ask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ask))
	}
	if in.LowRangePx != "" {
		const prefix string = ",\"LowRangePx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LowRangePx))
	}
	if in.HighRangePx != "" {
		const prefix string = ",\"HighRangePx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighRangePx))
	}
	if in.LowLimitPx != "" {
		const prefix string = ",\"LowLimitPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LowLimitPx))
	}
	if in.HighLimitPx != "" {
		const prefix string = ",\"HighLimitPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighLimitPx))
	}
	if in.ClearingPx != "" {
		const prefix string = ",\"ClearingPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClearingPx))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MDEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4e6768eEncodeGithubComXenaexClientGoXenaXmsg3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MDEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4e6768eDecodeGithubComXenaexClientGoXenaXmsg3(l, v)
}
