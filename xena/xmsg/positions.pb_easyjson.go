// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package xmsg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg(in *jlexer.Lexer, out *RelatedTrade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "relatedTradeId":
			out.RelatedTradeId = string(in.String())
		case "relatedTradeType":
			out.RelatedTradeType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg(out *jwriter.Writer, in RelatedTrade) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RelatedTradeId != "" {
		const prefix string = ",\"relatedTradeId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RelatedTradeId))
	}
	if in.RelatedTradeType != "" {
		const prefix string = ",\"relatedTradeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelatedTradeType))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RelatedTrade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RelatedTrade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg1(in *jlexer.Lexer, out *PositionsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "posReqId":
			out.PosReqId = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg1(out *jwriter.Writer, in PositionsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.PosReqId != "" {
		const prefix string = ",\"posReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosReqId))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg1(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg2(in *jlexer.Lexer, out *PositionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "positionId":
			out.PositionId = uint64(in.Uint64())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "symbol":
			out.Symbol = string(in.String())
		case "positionOpenTime":
			out.PositionOpenTime = int64(in.Int64())
		case "avgPx":
			out.AvgPx = string(in.String())
		case "volume":
			out.Volume = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "settlDate":
			out.SettlDate = int64(in.Int64())
		case "settlPrice":
			out.SettlPrice = string(in.String())
		case "priorSettlPrice":
			out.PriorSettlPrice = string(in.String())
		case "previousClearingBusinessDate":
			out.PreviousClearingBusinessDate = int64(in.Int64())
		case "clearingBusinessDate":
			out.ClearingBusinessDate = int64(in.Int64())
		case "marginAmounts":
			if in.IsNull() {
				in.Skip()
				out.MarginAmounts = nil
			} else {
				in.Delim('[')
				if out.MarginAmounts == nil {
					if !in.IsDelim(']') {
						out.MarginAmounts = make([]*MarginAmount, 0, 8)
					} else {
						out.MarginAmounts = []*MarginAmount{}
					}
				} else {
					out.MarginAmounts = (out.MarginAmounts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MarginAmount
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MarginAmount)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.MarginAmounts = append(out.MarginAmounts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "payments":
			if in.IsNull() {
				in.Skip()
				out.Payments = nil
			} else {
				in.Delim('[')
				if out.Payments == nil {
					if !in.IsDelim(']') {
						out.Payments = make([]*Payment, 0, 8)
					} else {
						out.Payments = []*Payment{}
					}
				} else {
					out.Payments = (out.Payments)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *Payment
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Payment)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Payments = append(out.Payments, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "relatedTrades":
			if in.IsNull() {
				in.Skip()
				out.RelatedTrades = nil
			} else {
				in.Delim('[')
				if out.RelatedTrades == nil {
					if !in.IsDelim(']') {
						out.RelatedTrades = make([]*RelatedTrade, 0, 8)
					} else {
						out.RelatedTrades = []*RelatedTrade{}
					}
				} else {
					out.RelatedTrades = (out.RelatedTrades)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *RelatedTrade
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(RelatedTrade)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.RelatedTrades = append(out.RelatedTrades, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg2(out *jwriter.Writer, in PositionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.PositionId != 0 {
		const prefix string = ",\"positionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PositionId))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.PositionOpenTime != 0 {
		const prefix string = ",\"positionOpenTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PositionOpenTime))
	}
	if in.AvgPx != "" {
		const prefix string = ",\"avgPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvgPx))
	}
	if in.Volume != "" {
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Volume))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.SettlDate != 0 {
		const prefix string = ",\"settlDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SettlDate))
	}
	if in.SettlPrice != "" {
		const prefix string = ",\"settlPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlPrice))
	}
	if in.PriorSettlPrice != "" {
		const prefix string = ",\"priorSettlPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriorSettlPrice))
	}
	if in.PreviousClearingBusinessDate != 0 {
		const prefix string = ",\"previousClearingBusinessDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PreviousClearingBusinessDate))
	}
	if in.ClearingBusinessDate != 0 {
		const prefix string = ",\"clearingBusinessDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ClearingBusinessDate))
	}
	if len(in.MarginAmounts) != 0 {
		const prefix string = ",\"marginAmounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.MarginAmounts {
				if v4 > 0 {
					out.RawByte(',')
				}
				if v5 == nil {
					out.RawString("null")
				} else {
					(*v5).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Payments) != 0 {
		const prefix string = ",\"payments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Payments {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.RelatedTrades) != 0 {
		const prefix string = ",\"relatedTrades\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.RelatedTrades {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg2(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg3(in *jlexer.Lexer, out *PositionMaintenanceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "posReqId":
			out.PosReqId = string(in.String())
		case "posTransType":
			out.PosTransType = string(in.String())
		case "posMaintAction":
			out.PosMaintAction = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg3(out *jwriter.Writer, in PositionMaintenanceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.PosReqId != "" {
		const prefix string = ",\"posReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosReqId))
	}
	if in.PosTransType != "" {
		const prefix string = ",\"posTransType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosTransType))
	}
	if in.PosMaintAction != "" {
		const prefix string = ",\"posMaintAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosMaintAction))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionMaintenanceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionMaintenanceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg3(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg4(in *jlexer.Lexer, out *PositionMaintenanceReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "posReqId":
			out.PosReqId = string(in.String())
		case "posTransType":
			out.PosTransType = string(in.String())
		case "posMaintAction":
			out.PosMaintAction = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg4(out *jwriter.Writer, in PositionMaintenanceReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.PosReqId != "" {
		const prefix string = ",\"posReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosReqId))
	}
	if in.PosTransType != "" {
		const prefix string = ",\"posTransType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosTransType))
	}
	if in.PosMaintAction != "" {
		const prefix string = ",\"posMaintAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosMaintAction))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionMaintenanceReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionMaintenanceReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg4(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg5(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "paymentType":
			out.PaymentType = string(in.String())
		case "paymentCurrency":
			out.PaymentCurrency = string(in.String())
		case "paymentAmount":
			out.PaymentAmount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg5(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PaymentType != "" {
		const prefix string = ",\"paymentType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PaymentType))
	}
	if in.PaymentCurrency != "" {
		const prefix string = ",\"paymentCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PaymentCurrency))
	}
	if in.PaymentAmount != "" {
		const prefix string = ",\"paymentAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PaymentAmount))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg5(l, v)
}
func easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg6(in *jlexer.Lexer, out *MassPositionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "posReqId":
			out.PosReqId = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "openPositions":
			if in.IsNull() {
				in.Skip()
				out.OpenPositions = nil
			} else {
				in.Delim('[')
				if out.OpenPositions == nil {
					if !in.IsDelim(']') {
						out.OpenPositions = make([]*PositionReport, 0, 8)
					} else {
						out.OpenPositions = []*PositionReport{}
					}
				} else {
					out.OpenPositions = (out.OpenPositions)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *PositionReport
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(PositionReport)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.OpenPositions = append(out.OpenPositions, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positionHistory":
			if in.IsNull() {
				in.Skip()
				out.PositionHistory = nil
			} else {
				in.Delim('[')
				if out.PositionHistory == nil {
					if !in.IsDelim(']') {
						out.PositionHistory = make([]*PositionReport, 0, 8)
					} else {
						out.PositionHistory = []*PositionReport{}
					}
				} else {
					out.PositionHistory = (out.PositionHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *PositionReport
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(PositionReport)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.PositionHistory = append(out.PositionHistory, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg6(out *jwriter.Writer, in MassPositionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.PosReqId != "" {
		const prefix string = ",\"posReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PosReqId))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if len(in.OpenPositions) != 0 {
		const prefix string = ",\"openPositions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.OpenPositions {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.PositionHistory) != 0 {
		const prefix string = ",\"positionHistory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.PositionHistory {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"rejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MassPositionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson70aedc24EncodeGithubComXenaexClientGoXenaXmsg6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MassPositionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson70aedc24DecodeGithubComXenaexClientGoXenaXmsg6(l, v)
}
