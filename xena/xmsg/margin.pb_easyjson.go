// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package xmsg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6727e0DecodeGithubComXenaexClientGoXenaXmsg(in *jlexer.Lexer, out *MarginRequirementReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "accountStatusRequestId":
			out.AccountStatusRequestId = string(in.String())
		case "marginReqmtRptType":
			out.MarginReqmtRptType = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "marginAmounts":
			if in.IsNull() {
				in.Skip()
				out.MarginAmounts = nil
			} else {
				in.Delim('[')
				if out.MarginAmounts == nil {
					if !in.IsDelim(']') {
						out.MarginAmounts = make([]*MarginAmount, 0, 8)
					} else {
						out.MarginAmounts = []*MarginAmount{}
					}
				} else {
					out.MarginAmounts = (out.MarginAmounts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MarginAmount
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MarginAmount)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.MarginAmounts = append(out.MarginAmounts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6727e0EncodeGithubComXenaexClientGoXenaXmsg(out *jwriter.Writer, in MarginRequirementReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.AccountStatusRequestId != "" {
		const prefix string = ",\"accountStatusRequestId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountStatusRequestId))
	}
	if in.MarginReqmtRptType != "" {
		const prefix string = ",\"marginReqmtRptType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginReqmtRptType))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if len(in.MarginAmounts) != 0 {
		const prefix string = ",\"marginAmounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.MarginAmounts {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"rejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginRequirementReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6727e0EncodeGithubComXenaexClientGoXenaXmsg(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginRequirementReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6727e0DecodeGithubComXenaexClientGoXenaXmsg(l, v)
}
func easyjson6727e0DecodeGithubComXenaexClientGoXenaXmsg1(in *jlexer.Lexer, out *MarginAmount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "marginAmt":
			out.MarginAmt = string(in.String())
		case "marginAmtType":
			out.MarginAmtType = string(in.String())
		case "marginAmtCcy":
			out.MarginAmtCcy = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6727e0EncodeGithubComXenaexClientGoXenaXmsg1(out *jwriter.Writer, in MarginAmount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MarginAmt != "" {
		const prefix string = ",\"marginAmt\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MarginAmt))
	}
	if in.MarginAmtType != "" {
		const prefix string = ",\"marginAmtType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginAmtType))
	}
	if in.MarginAmtCcy != "" {
		const prefix string = ",\"marginAmtCcy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginAmtCcy))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarginAmount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6727e0EncodeGithubComXenaexClientGoXenaXmsg1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarginAmount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6727e0DecodeGithubComXenaexClientGoXenaXmsg1(l, v)
}
