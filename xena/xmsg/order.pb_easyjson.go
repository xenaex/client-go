// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package xmsg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg(in *jlexer.Lexer, out *TriggeringInstruction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "refClordId":
			out.RefClOrdId = string(in.String())
		case "triggerAction":
			out.TriggerAction = string(in.String())
		case "triggerType":
			out.TriggerType = string(in.String())
		case "triggerScope":
			out.TriggerScope = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg(out *jwriter.Writer, in TriggeringInstruction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RefClOrdId != "" {
		const prefix string = ",\"refClordId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RefClOrdId))
	}
	if in.TriggerAction != "" {
		const prefix string = ",\"triggerAction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggerAction))
	}
	if in.TriggerType != "" {
		const prefix string = ",\"triggerType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggerType))
	}
	if in.TriggerScope != "" {
		const prefix string = ",\"triggerScope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TriggerScope))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TriggeringInstruction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TriggeringInstruction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg1(in *jlexer.Lexer, out *TradeCaptureReportRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "tradeRequestID":
			out.TradeRequestID = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "symbol":
			out.Symbol = string(in.String())
		case "transactTime":
			if in.IsNull() {
				in.Skip()
				out.TransactTime = nil
			} else {
				in.Delim('[')
				if out.TransactTime == nil {
					if !in.IsDelim(']') {
						out.TransactTime = make([]int64, 0, 8)
					} else {
						out.TransactTime = []int64{}
					}
				} else {
					out.TransactTime = (out.TransactTime)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.TransactTime = append(out.TransactTime, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg1(out *jwriter.Writer, in TradeCaptureReportRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.TradeRequestID != "" {
		const prefix string = ",\"tradeRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeRequestID))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if len(in.TransactTime) != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.TransactTime {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeCaptureReportRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeCaptureReportRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg1(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg2(in *jlexer.Lexer, out *SLTP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ordType":
			out.OrdType = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "stopPx":
			out.StopPx = string(in.String())
		case "capPrice":
			out.CapPrice = string(in.String())
		case "pegPriceType":
			out.PegPriceType = string(in.String())
		case "pegOffsetType":
			out.PegOffsetType = string(in.String())
		case "pegOffsetValue":
			out.PegOffsetValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg2(out *jwriter.Writer, in SLTP) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OrdType != "" {
		const prefix string = ",\"ordType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.OrdType))
	}
	if in.Price != "" {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Price))
	}
	if in.StopPx != "" {
		const prefix string = ",\"stopPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StopPx))
	}
	if in.CapPrice != "" {
		const prefix string = ",\"capPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CapPrice))
	}
	if in.PegPriceType != "" {
		const prefix string = ",\"pegPriceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegPriceType))
	}
	if in.PegOffsetType != "" {
		const prefix string = ",\"pegOffsetType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetType))
	}
	if in.PegOffsetValue != "" {
		const prefix string = ",\"pegOffsetValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetValue))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SLTP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SLTP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg2(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg3(in *jlexer.Lexer, out *Reject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg3(out *jwriter.Writer, in Reject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.RejectReason != "" {
		const prefix string = ",\"rejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg3(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg4(in *jlexer.Lexer, out *Partie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "partieId":
			out.PartieId = string(in.String())
		case "partieRole":
			out.PartieRole = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg4(out *jwriter.Writer, in Partie) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PartieId != "" {
		const prefix string = ",\"partieId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.PartieId))
	}
	if in.PartieRole != "" {
		const prefix string = ",\"partieRole\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartieRole))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Partie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Partie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg4(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg5(in *jlexer.Lexer, out *OrderStatusRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "ordStatusReqId":
			out.OrdStatusReqId = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg5(out *jwriter.Writer, in OrderStatusRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.OrdStatusReqId != "" {
		const prefix string = ",\"ordStatusReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdStatusReqId))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderStatusRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderStatusRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg5(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg6(in *jlexer.Lexer, out *OrderMassStatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "massStatusReqId":
			out.MassStatusReqId = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "executionReports":
			if in.IsNull() {
				in.Skip()
				out.ExecutionReports = nil
			} else {
				in.Delim('[')
				if out.ExecutionReports == nil {
					if !in.IsDelim(']') {
						out.ExecutionReports = make([]*ExecutionReport, 0, 8)
					} else {
						out.ExecutionReports = []*ExecutionReport{}
					}
				} else {
					out.ExecutionReports = (out.ExecutionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *ExecutionReport
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ExecutionReport)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.ExecutionReports = append(out.ExecutionReports, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg6(out *jwriter.Writer, in OrderMassStatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.MassStatusReqId != "" {
		const prefix string = ",\"massStatusReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassStatusReqId))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if len(in.ExecutionReports) != 0 {
		const prefix string = ",\"executionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.ExecutionReports {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"rejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderMassStatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderMassStatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg6(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg7(in *jlexer.Lexer, out *OrderMassStatusRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "massStatusReqId":
			out.MassStatusReqId = string(in.String())
		case "massStatusReqType":
			out.MassStatusReqType = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "symbol":
			out.Symbol = string(in.String())
		case "transactTime":
			if in.IsNull() {
				in.Skip()
				out.TransactTime = nil
			} else {
				in.Delim('[')
				if out.TransactTime == nil {
					if !in.IsDelim(']') {
						out.TransactTime = make([]int64, 0, 8)
					} else {
						out.TransactTime = []int64{}
					}
				} else {
					out.TransactTime = (out.TransactTime)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int64
					v7 = int64(in.Int64())
					out.TransactTime = append(out.TransactTime, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg7(out *jwriter.Writer, in OrderMassStatusRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.MassStatusReqId != "" {
		const prefix string = ",\"massStatusReqId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassStatusReqId))
	}
	if in.MassStatusReqType != "" {
		const prefix string = ",\"massStatusReqType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassStatusReqType))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if len(in.TransactTime) != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.TransactTime {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderMassStatusRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderMassStatusRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg7(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg8(in *jlexer.Lexer, out *OrderMassCancelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "massCancelRequestType":
			out.MassCancelRequestType = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "positionEffect":
			out.PositionEffect = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg8(out *jwriter.Writer, in OrderMassCancelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.MassCancelRequestType != "" {
		const prefix string = ",\"massCancelRequestType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassCancelRequestType))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.PositionEffect != "" {
		const prefix string = ",\"positionEffect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PositionEffect))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderMassCancelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderMassCancelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg8(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg9(in *jlexer.Lexer, out *OrderMassCancelReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "massActionReportID":
			out.MassActionReportID = string(in.String())
		case "massCancelResponse":
			out.MassCancelResponse = string(in.String())
		case "massCancelRejectReason":
			out.MassCancelRejectReason = string(in.String())
		case "rejectText":
			out.RejectText = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "totalAffectedOrders":
			out.TotalAffectedOrders = int64(in.Int64())
		case "account":
			out.Account = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg9(out *jwriter.Writer, in OrderMassCancelReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.MassActionReportID != "" {
		const prefix string = ",\"massActionReportID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassActionReportID))
	}
	if in.MassCancelResponse != "" {
		const prefix string = ",\"massCancelResponse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassCancelResponse))
	}
	if in.MassCancelRejectReason != "" {
		const prefix string = ",\"massCancelRejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MassCancelRejectReason))
	}
	if in.RejectText != "" {
		const prefix string = ",\"rejectText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectText))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.TotalAffectedOrders != 0 {
		const prefix string = ",\"totalAffectedOrders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TotalAffectedOrders))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderMassCancelReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderMassCancelReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg9(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg10(in *jlexer.Lexer, out *OrderListAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contingencyType":
			out.ContingencyType = string(in.String())
		case "orderId":
			if in.IsNull() {
				in.Skip()
				out.OrderId = nil
			} else {
				in.Delim('[')
				if out.OrderId == nil {
					if !in.IsDelim(']') {
						out.OrderId = make([]string, 0, 4)
					} else {
						out.OrderId = []string{}
					}
				} else {
					out.OrderId = (out.OrderId)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.OrderId = append(out.OrderId, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg10(out *jwriter.Writer, in OrderListAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContingencyType != "" {
		const prefix string = ",\"contingencyType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContingencyType))
	}
	if len(in.OrderId) != 0 {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.OrderId {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderListAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderListAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg10(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg11(in *jlexer.Lexer, out *OrderCancelRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "origClOrdId":
			out.OrigClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "account":
			out.Account = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg11(out *jwriter.Writer, in OrderCancelRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrigClOrdId != "" {
		const prefix string = ",\"origClOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrigClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCancelRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCancelRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg11(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg12(in *jlexer.Lexer, out *OrderCancelReplaceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "origClOrdId":
			out.OrigClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "account":
			out.Account = uint64(in.Uint64())
		case "execInst":
			if in.IsNull() {
				in.Skip()
				out.ExecInst = nil
			} else {
				in.Delim('[')
				if out.ExecInst == nil {
					if !in.IsDelim(']') {
						out.ExecInst = make([]string, 0, 4)
					} else {
						out.ExecInst = []string{}
					}
				} else {
					out.ExecInst = (out.ExecInst)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.ExecInst = append(out.ExecInst, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "orderQty":
			out.OrderQty = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "stopPx":
			out.StopPx = string(in.String())
		case "capPrice":
			out.CapPrice = string(in.String())
		case "pegPriceType":
			out.PegPriceType = string(in.String())
		case "pegOffsetType":
			out.PegOffsetType = string(in.String())
		case "pegOffsetValue":
			out.PegOffsetValue = string(in.String())
		case "sltp":
			if in.IsNull() {
				in.Skip()
				out.SLTP = nil
			} else {
				in.Delim('[')
				if out.SLTP == nil {
					if !in.IsDelim(']') {
						out.SLTP = make([]*SLTP, 0, 8)
					} else {
						out.SLTP = []*SLTP{}
					}
				} else {
					out.SLTP = (out.SLTP)[:0]
				}
				for !in.IsDelim(']') {
					var v14 *SLTP
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						if v14 == nil {
							v14 = new(SLTP)
						}
						(*v14).UnmarshalEasyJSON(in)
					}
					out.SLTP = append(out.SLTP, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg12(out *jwriter.Writer, in OrderCancelReplaceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrigClOrdId != "" {
		const prefix string = ",\"origClOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrigClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if len(in.ExecInst) != 0 {
		const prefix string = ",\"execInst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ExecInst {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.OrderQty != "" {
		const prefix string = ",\"orderQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderQty))
	}
	if in.Price != "" {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Price))
	}
	if in.StopPx != "" {
		const prefix string = ",\"stopPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StopPx))
	}
	if in.CapPrice != "" {
		const prefix string = ",\"capPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CapPrice))
	}
	if in.PegPriceType != "" {
		const prefix string = ",\"pegPriceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegPriceType))
	}
	if in.PegOffsetType != "" {
		const prefix string = ",\"pegOffsetType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetType))
	}
	if in.PegOffsetValue != "" {
		const prefix string = ",\"pegOffsetValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetValue))
	}
	if len(in.SLTP) != 0 {
		const prefix string = ",\"sltp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.SLTP {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCancelReplaceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCancelReplaceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg12(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg13(in *jlexer.Lexer, out *OrderCancelReject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "symbol":
			out.Symbol = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "origClOrdId":
			out.OrigClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		case "ordStatus":
			out.OrdStatus = string(in.String())
		case "cxlRejResponseTo":
			out.CxlRejResponseTo = string(in.String())
		case "cxlRejReason":
			out.CxlRejReason = string(in.String())
		case "rejectText":
			out.RejectText = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg13(out *jwriter.Writer, in OrderCancelReject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrigClOrdId != "" {
		const prefix string = ",\"origClOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrigClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	if in.OrdStatus != "" {
		const prefix string = ",\"ordStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdStatus))
	}
	if in.CxlRejResponseTo != "" {
		const prefix string = ",\"cxlRejResponseTo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CxlRejResponseTo))
	}
	if in.CxlRejReason != "" {
		const prefix string = ",\"cxlRejReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CxlRejReason))
	}
	if in.RejectText != "" {
		const prefix string = ",\"rejectText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectText))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderCancelReject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderCancelReject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg13(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg14(in *jlexer.Lexer, out *NewOrderSingle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "settlType":
			out.SettlType = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "listSeqNo":
			out.ListSeqNo = int32(in.Int32())
		case "orderQty":
			out.OrderQty = string(in.String())
		case "ordType":
			out.OrdType = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "stopPx":
			out.StopPx = string(in.String())
		case "capPrice":
			out.CapPrice = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "execInst":
			if in.IsNull() {
				in.Skip()
				out.ExecInst = nil
			} else {
				in.Delim('[')
				if out.ExecInst == nil {
					if !in.IsDelim(']') {
						out.ExecInst = make([]string, 0, 4)
					} else {
						out.ExecInst = []string{}
					}
				} else {
					out.ExecInst = (out.ExecInst)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.ExecInst = append(out.ExecInst, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "commissionLevel":
			out.CommissionLevel = string(in.String())
		case "pegPriceType":
			out.PegPriceType = string(in.String())
		case "pegOffsetType":
			out.PegOffsetType = string(in.String())
		case "pegOffsetValue":
			out.PegOffsetValue = string(in.String())
		case "triggeringInstructions":
			if in.IsNull() {
				in.Skip()
				out.TriggeringInstructions = nil
			} else {
				in.Delim('[')
				if out.TriggeringInstructions == nil {
					if !in.IsDelim(']') {
						out.TriggeringInstructions = make([]*TriggeringInstruction, 0, 8)
					} else {
						out.TriggeringInstructions = []*TriggeringInstruction{}
					}
				} else {
					out.TriggeringInstructions = (out.TriggeringInstructions)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *TriggeringInstruction
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(TriggeringInstruction)
						}
						(*v20).UnmarshalEasyJSON(in)
					}
					out.TriggeringInstructions = append(out.TriggeringInstructions, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positionId":
			out.PositionId = uint64(in.Uint64())
		case "positionEffect":
			out.PositionEffect = string(in.String())
		case "sltp":
			if in.IsNull() {
				in.Skip()
				out.SLTP = nil
			} else {
				in.Delim('[')
				if out.SLTP == nil {
					if !in.IsDelim(']') {
						out.SLTP = make([]*SLTP, 0, 8)
					} else {
						out.SLTP = []*SLTP{}
					}
				} else {
					out.SLTP = (out.SLTP)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *SLTP
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(SLTP)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.SLTP = append(out.SLTP, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		case "grpId":
			out.GrpID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg14(out *jwriter.Writer, in NewOrderSingle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.SettlType != "" {
		const prefix string = ",\"settlType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlType))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.ListSeqNo != 0 {
		const prefix string = ",\"listSeqNo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ListSeqNo))
	}
	if in.OrderQty != "" {
		const prefix string = ",\"orderQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderQty))
	}
	if in.OrdType != "" {
		const prefix string = ",\"ordType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdType))
	}
	if in.Price != "" {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Price))
	}
	if in.StopPx != "" {
		const prefix string = ",\"stopPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StopPx))
	}
	if in.CapPrice != "" {
		const prefix string = ",\"capPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CapPrice))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if len(in.ExecInst) != 0 {
		const prefix string = ",\"execInst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v22, v23 := range in.ExecInst {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	if in.TimeInForce != "" {
		const prefix string = ",\"timeInForce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeInForce))
	}
	if in.CommissionLevel != "" {
		const prefix string = ",\"commissionLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommissionLevel))
	}
	if in.PegPriceType != "" {
		const prefix string = ",\"pegPriceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegPriceType))
	}
	if in.PegOffsetType != "" {
		const prefix string = ",\"pegOffsetType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetType))
	}
	if in.PegOffsetValue != "" {
		const prefix string = ",\"pegOffsetValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetValue))
	}
	if len(in.TriggeringInstructions) != 0 {
		const prefix string = ",\"triggeringInstructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.TriggeringInstructions {
				if v24 > 0 {
					out.RawByte(',')
				}
				if v25 == nil {
					out.RawString("null")
				} else {
					(*v25).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.PositionId != 0 {
		const prefix string = ",\"positionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PositionId))
	}
	if in.PositionEffect != "" {
		const prefix string = ",\"positionEffect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PositionEffect))
	}
	if len(in.SLTP) != 0 {
		const prefix string = ",\"sltp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.SLTP {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					(*v27).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.GrpID != "" {
		const prefix string = ",\"grpId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GrpID))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewOrderSingle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewOrderSingle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg14(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg15(in *jlexer.Lexer, out *NewOrderList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "listId":
			out.ListId = string(in.String())
		case "bidType":
			out.BidType = string(in.String())
		case "totNoOrders":
			out.TotNoOrders = int32(in.Int32())
		case "contingencyType":
			out.ContingencyType = string(in.String())
		case "listOrdGrp":
			if in.IsNull() {
				in.Skip()
				out.ListOrdGrp = nil
			} else {
				in.Delim('[')
				if out.ListOrdGrp == nil {
					if !in.IsDelim(']') {
						out.ListOrdGrp = make([]*NewOrderSingle, 0, 8)
					} else {
						out.ListOrdGrp = []*NewOrderSingle{}
					}
				} else {
					out.ListOrdGrp = (out.ListOrdGrp)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *NewOrderSingle
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(NewOrderSingle)
						}
						(*v28).UnmarshalEasyJSON(in)
					}
					out.ListOrdGrp = append(out.ListOrdGrp, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nestedListGrp":
			if in.IsNull() {
				in.Skip()
				out.NestedListGrp = nil
			} else {
				in.Delim('[')
				if out.NestedListGrp == nil {
					if !in.IsDelim(']') {
						out.NestedListGrp = make([]*NewOrderList, 0, 8)
					} else {
						out.NestedListGrp = []*NewOrderList{}
					}
				} else {
					out.NestedListGrp = (out.NestedListGrp)[:0]
				}
				for !in.IsDelim(']') {
					var v29 *NewOrderList
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(NewOrderList)
						}
						(*v29).UnmarshalEasyJSON(in)
					}
					out.NestedListGrp = append(out.NestedListGrp, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbol":
			out.Symbol = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "account":
			out.Account = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg15(out *jwriter.Writer, in NewOrderList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.ListId != "" {
		const prefix string = ",\"listId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListId))
	}
	if in.BidType != "" {
		const prefix string = ",\"bidType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BidType))
	}
	if in.TotNoOrders != 0 {
		const prefix string = ",\"totNoOrders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TotNoOrders))
	}
	if in.ContingencyType != "" {
		const prefix string = ",\"contingencyType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContingencyType))
	}
	if len(in.ListOrdGrp) != 0 {
		const prefix string = ",\"listOrdGrp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.ListOrdGrp {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					(*v31).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.NestedListGrp) != 0 {
		const prefix string = ",\"nestedListGrp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.NestedListGrp {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					(*v33).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewOrderList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewOrderList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg15(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg16(in *jlexer.Lexer, out *MassTradeCaptureReportResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "tradeRequestID":
			out.TradeRequestID = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "executionReports":
			if in.IsNull() {
				in.Skip()
				out.ExecutionReports = nil
			} else {
				in.Delim('[')
				if out.ExecutionReports == nil {
					if !in.IsDelim(']') {
						out.ExecutionReports = make([]*ExecutionReport, 0, 8)
					} else {
						out.ExecutionReports = []*ExecutionReport{}
					}
				} else {
					out.ExecutionReports = (out.ExecutionReports)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *ExecutionReport
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(ExecutionReport)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.ExecutionReports = append(out.ExecutionReports, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg16(out *jwriter.Writer, in MassTradeCaptureReportResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.TradeRequestID != "" {
		const prefix string = ",\"tradeRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeRequestID))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if len(in.ExecutionReports) != 0 {
		const prefix string = ",\"executionReports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.ExecutionReports {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					(*v36).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.RejectReason != "" {
		const prefix string = ",\"rejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectReason))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MassTradeCaptureReportResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MassTradeCaptureReportResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg16(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg17(in *jlexer.Lexer, out *ListStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "listId":
			out.ListId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "listStatusType":
			out.ListStatusType = string(in.String())
		case "listOrderStatus":
			out.ListOrderStatus = string(in.String())
		case "contingencyType":
			out.ContingencyType = string(in.String())
		case "listRejectReason":
			out.ListRejectReason = string(in.String())
		case "listRejectOrder":
			if in.IsNull() {
				in.Skip()
				out.ListRejectOrder = nil
			} else {
				if out.ListRejectOrder == nil {
					out.ListRejectOrder = new(ExecutionReport)
				}
				(*out.ListRejectOrder).UnmarshalEasyJSON(in)
			}
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "listStatusText":
			out.ListStatusText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg17(out *jwriter.Writer, in ListStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.ListId != "" {
		const prefix string = ",\"listId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListId))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.ListStatusType != "" {
		const prefix string = ",\"listStatusType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListStatusType))
	}
	if in.ListOrderStatus != "" {
		const prefix string = ",\"listOrderStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListOrderStatus))
	}
	if in.ContingencyType != "" {
		const prefix string = ",\"contingencyType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContingencyType))
	}
	if in.ListRejectReason != "" {
		const prefix string = ",\"listRejectReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListRejectReason))
	}
	if in.ListRejectOrder != nil {
		const prefix string = ",\"listRejectOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ListRejectOrder).MarshalEasyJSON(out)
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.ListStatusText != "" {
		const prefix string = ",\"listStatusText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListStatusText))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg17(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg18(in *jlexer.Lexer, out *ExecutionReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "ordStatusReqID":
			out.OrdStatusReqID = string(in.String())
		case "account":
			out.Account = uint64(in.Uint64())
		case "clOrdId":
			out.ClOrdId = string(in.String())
		case "origClOrdId":
			out.OrigClOrdId = string(in.String())
		case "orderId":
			out.OrderId = string(in.String())
		case "listId":
			out.ListId = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "ordType":
			out.OrdType = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "stopPx":
			out.StopPx = string(in.String())
		case "execInst":
			if in.IsNull() {
				in.Skip()
				out.ExecInst = nil
			} else {
				in.Delim('[')
				if out.ExecInst == nil {
					if !in.IsDelim(']') {
						out.ExecInst = make([]string, 0, 4)
					} else {
						out.ExecInst = []string{}
					}
				} else {
					out.ExecInst = (out.ExecInst)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.ExecInst = append(out.ExecInst, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "execId":
			out.ExecId = string(in.String())
		case "execType":
			out.ExecType = string(in.String())
		case "execRestatementReason":
			out.ExecRestatementReason = string(in.String())
		case "tradeId":
			out.TradeId = string(in.String())
		case "ordStatus":
			out.OrdStatus = string(in.String())
		case "ordRejReason":
			out.OrdRejReason = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "orderQty":
			out.OrderQty = string(in.String())
		case "leavesQty":
			out.LeavesQty = string(in.String())
		case "cumQty":
			out.CumQty = string(in.String())
		case "lastQty":
			out.LastQty = string(in.String())
		case "capPrice":
			out.CapPrice = string(in.String())
		case "lastPx":
			out.LastPx = string(in.String())
		case "avgPx":
			out.AvgPx = string(in.String())
		case "calculatedCcyLastQty":
			out.CalculatedCcyLastQty = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "settlCurrency":
			out.SettlCurrency = string(in.String())
		case "settlType":
			out.SettlType = string(in.String())
		case "netMoney":
			out.NetMoney = string(in.String())
		case "lastLiquidityInd":
			out.LastLiquidityInd = string(in.String())
		case "commission":
			out.Commission = string(in.String())
		case "commRate":
			out.CommRate = string(in.String())
		case "commCurrency":
			out.CommCurrency = string(in.String())
		case "rejectText":
			out.RejectText = string(in.String())
		case "pegPriceType":
			out.PegPriceType = string(in.String())
		case "pegOffsetType":
			out.PegOffsetType = string(in.String())
		case "pegOffsetValue":
			out.PegOffsetValue = string(in.String())
		case "positionId":
			out.PositionId = uint64(in.Uint64())
		case "positionEffect":
			out.PositionEffect = string(in.String())
		case "marginAmt":
			out.MarginAmt = string(in.String())
		case "marginAmtType":
			out.MarginAmtType = string(in.String())
		case "marginAmtCcy":
			out.MarginAmtCcy = string(in.String())
		case "sltp":
			if in.IsNull() {
				in.Skip()
				out.SLTP = nil
			} else {
				in.Delim('[')
				if out.SLTP == nil {
					if !in.IsDelim(']') {
						out.SLTP = make([]*SLTP, 0, 8)
					} else {
						out.SLTP = []*SLTP{}
					}
				} else {
					out.SLTP = (out.SLTP)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *SLTP
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(SLTP)
						}
						(*v38).UnmarshalEasyJSON(in)
					}
					out.SLTP = append(out.SLTP, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg18(out *jwriter.Writer, in ExecutionReport) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.OrdStatusReqID != "" {
		const prefix string = ",\"ordStatusReqID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdStatusReqID))
	}
	if in.Account != 0 {
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Account))
	}
	if in.ClOrdId != "" {
		const prefix string = ",\"clOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClOrdId))
	}
	if in.OrigClOrdId != "" {
		const prefix string = ",\"origClOrdId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrigClOrdId))
	}
	if in.OrderId != "" {
		const prefix string = ",\"orderId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderId))
	}
	if in.ListId != "" {
		const prefix string = ",\"listId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ListId))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.OrdType != "" {
		const prefix string = ",\"ordType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdType))
	}
	if in.Price != "" {
		const prefix string = ",\"price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Price))
	}
	if in.StopPx != "" {
		const prefix string = ",\"stopPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StopPx))
	}
	if len(in.ExecInst) != 0 {
		const prefix string = ",\"execInst\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v39, v40 := range in.ExecInst {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	if in.TimeInForce != "" {
		const prefix string = ",\"timeInForce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TimeInForce))
	}
	if in.TransactTime != 0 {
		const prefix string = ",\"transactTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TransactTime))
	}
	if in.ExecId != "" {
		const prefix string = ",\"execId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExecId))
	}
	if in.ExecType != "" {
		const prefix string = ",\"execType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExecType))
	}
	if in.ExecRestatementReason != "" {
		const prefix string = ",\"execRestatementReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExecRestatementReason))
	}
	if in.TradeId != "" {
		const prefix string = ",\"tradeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeId))
	}
	if in.OrdStatus != "" {
		const prefix string = ",\"ordStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdStatus))
	}
	if in.OrdRejReason != "" {
		const prefix string = ",\"ordRejReason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrdRejReason))
	}
	if in.Side != "" {
		const prefix string = ",\"side\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Side))
	}
	if in.OrderQty != "" {
		const prefix string = ",\"orderQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrderQty))
	}
	if in.LeavesQty != "" {
		const prefix string = ",\"leavesQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LeavesQty))
	}
	if in.CumQty != "" {
		const prefix string = ",\"cumQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CumQty))
	}
	if in.LastQty != "" {
		const prefix string = ",\"lastQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastQty))
	}
	if in.CapPrice != "" {
		const prefix string = ",\"capPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CapPrice))
	}
	if in.LastPx != "" {
		const prefix string = ",\"lastPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastPx))
	}
	if in.AvgPx != "" {
		const prefix string = ",\"avgPx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvgPx))
	}
	if in.CalculatedCcyLastQty != "" {
		const prefix string = ",\"calculatedCcyLastQty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CalculatedCcyLastQty))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.SettlCurrency != "" {
		const prefix string = ",\"settlCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlCurrency))
	}
	if in.SettlType != "" {
		const prefix string = ",\"settlType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SettlType))
	}
	if in.NetMoney != "" {
		const prefix string = ",\"netMoney\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetMoney))
	}
	if in.LastLiquidityInd != "" {
		const prefix string = ",\"lastLiquidityInd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastLiquidityInd))
	}
	if in.Commission != "" {
		const prefix string = ",\"commission\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Commission))
	}
	if in.CommRate != "" {
		const prefix string = ",\"commRate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommRate))
	}
	if in.CommCurrency != "" {
		const prefix string = ",\"commCurrency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommCurrency))
	}
	if in.RejectText != "" {
		const prefix string = ",\"rejectText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RejectText))
	}
	if in.PegPriceType != "" {
		const prefix string = ",\"pegPriceType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegPriceType))
	}
	if in.PegOffsetType != "" {
		const prefix string = ",\"pegOffsetType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetType))
	}
	if in.PegOffsetValue != "" {
		const prefix string = ",\"pegOffsetValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PegOffsetValue))
	}
	if in.PositionId != 0 {
		const prefix string = ",\"positionId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PositionId))
	}
	if in.PositionEffect != "" {
		const prefix string = ",\"positionEffect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PositionEffect))
	}
	if in.MarginAmt != "" {
		const prefix string = ",\"marginAmt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginAmt))
	}
	if in.MarginAmtType != "" {
		const prefix string = ",\"marginAmtType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginAmtType))
	}
	if in.MarginAmtCcy != "" {
		const prefix string = ",\"marginAmtCcy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MarginAmtCcy))
	}
	if len(in.SLTP) != 0 {
		const prefix string = ",\"sltp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v41, v42 := range in.SLTP {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					(*v42).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutionReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg18(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutionReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg18(l, v)
}
func easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg19(in *jlexer.Lexer, out *ApplicationHeartbeat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "grpId":
			out.GrpID = string(in.String())
		case "heartBtInt":
			out.HeartBtInt = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg19(out *jwriter.Writer, in ApplicationHeartbeat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MsgType != "" {
		const prefix string = ",\"msgType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	if in.GrpID != "" {
		const prefix string = ",\"grpId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GrpID))
	}
	if in.HeartBtInt != 0 {
		const prefix string = ",\"heartBtInt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.HeartBtInt))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplicationHeartbeat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b0c9e88EncodeGithubComXenaexClientGoXenaXmsg19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplicationHeartbeat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b0c9e88DecodeGithubComXenaexClientGoXenaXmsg19(l, v)
}
